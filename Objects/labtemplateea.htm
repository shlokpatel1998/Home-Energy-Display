<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\labtemplateea.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\labtemplateea.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Nov 06 11:41:22 2020
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; asmmain &rArr;  asmmain (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a4]">asmmain</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[13]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">HardFault_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[17]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">SVC_Handler</a><BR>
 <LI><a href="#[18]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">DebugMon_Handler</a><BR>
 <LI><a href="#[19]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">PendSV_Handler</a><BR>
 <LI><a href="#[1a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SysTick_Handler</a><BR>
 <LI><a href="#[a4]">asmmain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a4]">asmmain</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[54]">ADC0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[55]">ADC1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[39]">CAN0_Bus_Off_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3a]">CAN0_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[38]">CAN0_ORed_Message_buffer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3c]">CAN0_Rx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3b]">CAN0_Tx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3d]">CAN0_Wake_Up_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[41]">CAN1_Bus_Off_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[42]">CAN1_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[40]">CAN1_ORed_Message_buffer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[44]">CAN1_Rx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[43]">CAN1_Tx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[45]">CAN1_Wake_Up_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[d]">CLOCK_SYS_FllStableDelay</a> from fsl_clock_mk60d10.o(i.CLOCK_SYS_FllStableDelay) referenced from fsl_clock_mk60d10.o(i.CLOCK_SYS_SetConfiguration)
 <LI><a href="#[56]">CMP0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[57]">CMP1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[58]">CMP2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5c]">CMT_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6c]">DAC0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6d]">DAC1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1b]">DMA0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[25]">DMA10_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[26]">DMA11_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[27]">DMA12_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[28]">DMA13_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[29]">DMA14_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2a]">DMA15_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1c]">DMA1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1d]">DMA2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1e]">DMA3_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1f]">DMA4_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[20]">DMA5_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[21]">DMA6_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[22]">DMA7_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[23]">DMA8_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[24]">DMA9_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2b]">DMA_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[83]">DefaultISR</a> from startup_mk60d10.o(.text) referenced 135 times from startup_mk60d10.o(RESET)
 <LI><a href="#[66]">ENET_1588_Timer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[69]">ENET_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[68]">ENET_Receive_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[67]">ENET_Transmit_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2d]">FTFL_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[59]">FTM0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5a]">FTM1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5b]">FTM2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[33]">I2C0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[34]">I2C1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3f]">I2S0_Rx_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3e]">I2S0_Tx_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[30]">LLWU_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[70]">LPTMR0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2f]">LVD_LVW_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6f]">MCG_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2c]">MCM_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[63]">PDB0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5f]">PIT0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[60]">PIT1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[61]">PIT2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[62]">PIT3_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[72]">PORTA_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[73]">PORTB_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[74]">PORTC_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[75]">PORTD_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[76]">PORTE_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[32]">RNG_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5d]">RTC_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5e]">RTC_Seconds_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2e]">Read_Collision_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[71]">Reserved102_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[77]">Reserved108_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[78]">Reserved109_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[7a]">Reserved111_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[7b]">Reserved112_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[7c]">Reserved113_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[7d]">Reserved114_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[7e]">Reserved115_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[7f]">Reserved116_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[80]">Reserved117_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[81]">Reserved118_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[82]">Reserved119_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[46]">Reserved59_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6a]">Reserved95_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6b]">SDHC_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[35]">SPI0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[79]">SWI_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[8]">SystemInit</a> from system_mk60d10.o(i.SystemInit) referenced from startup_mk60d10.o(.text)
 <LI><a href="#[6e]">TSI0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[49]">UART0_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[47]">UART0_LON_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[48]">UART0_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4b]">UART1_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4a]">UART1_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4d]">UART2_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4c]">UART2_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4f]">UART3_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4e]">UART3_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[51]">UART4_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[50]">UART4_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[53]">UART5_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[52]">UART5_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[f]">UART_HAL_ReceiveDataPolling</a> from fsl_uart_hal.o(i.UART_HAL_ReceiveDataPolling) referenced from fsl_debug_console.o(i.DbgConsole_Init)
 <LI><a href="#[e]">UART_HAL_SendDataPolling</a> from fsl_uart_hal.o(i.UART_HAL_SendDataPolling) referenced from fsl_debug_console.o(i.DbgConsole_Init)
 <LI><a href="#[64]">USB0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[65]">USBDCD_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[31]">WDOG_EWM_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[84]">__main</a> from __main.o(!!!main) referenced from startup_mk60d10.o(.text)
 <LI><a href="#[c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[10]">debug_putc</a> from fsl_debug_console.o(i.debug_putc) referenced from fsl_debug_console.o(i.debug_printf)
 <LI><a href="#[b]">fputc</a> from fsl_debug_console.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[9]">init_data_bss</a> from startup.o(i.init_data_bss) referenced from startup_mk60d10.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[84]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[85]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[87]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[88]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[89]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[f6]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[90]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[fa]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[100]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[101]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[102]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[103]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[105]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[106]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[107]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[108]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[109]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[95]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[10c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[10e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[112]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[86]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[113]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[114]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[8f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[115]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[91]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; asmmain &rArr;  asmmain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[116]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[94]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[117]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[96]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ef]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkWh
</UL>

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>FTFL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>PIT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>Reserved102_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>Reserved108_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>Reserved109_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>Reserved111_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>Reserved112_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>Reserved113_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>Reserved114_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>Reserved116_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>Reserved117_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>Reserved118_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>Reserved119_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>Reserved95_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SDHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART0_LON_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART5_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART5_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myMenuPrint
</UL>

<P><STRONG><a name="[9a]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[9f]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[9d]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[8e]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[e9]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doprint
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9e]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a0]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[99]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[a2]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[11b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[97]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a4]"></a>asmmain</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, mymain.o(MyCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = asmmain &rArr;  asmmain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asmmain
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myputchar
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myintprint
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mygetchar
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfprint
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myMenuPrint
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElement
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asmmain
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>BOARD_ClockInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board.o(i.BOARD_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = BOARD_ClockInit &rArr; BOARD_InitRtcOsc &rArr; CLOCK_SYS_RtcOscInit &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitRtcOsc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitOsc0
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[ad]"></a>BOARD_InitOsc0</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, board.o(i.BOARD_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BOARD_InitOsc0 &rArr; CLOCK_SYS_OscInit &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
</UL>

<P><STRONG><a name="[ae]"></a>BOARD_InitRtcOsc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, board.o(i.BOARD_InitRtcOsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BOARD_InitRtcOsc &rArr; CLOCK_SYS_RtcOscInit &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_RtcOscInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
</UL>

<P><STRONG><a name="[dc]"></a>CLOCK_HAL_EnablePll0InFllMode</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_EnablePll0InFllMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_HAL_EnablePll0InFllMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[b2]"></a>CLOCK_HAL_GetFllClk</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetFllClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllRefClk
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>

<P><STRONG><a name="[b3]"></a>CLOCK_HAL_GetFllRefClk</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetFllRefClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestFllExternalRefFreq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
</UL>

<P><STRONG><a name="[be]"></a>CLOCK_HAL_GetInternalRefClk</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetInternalRefClk))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>

<P><STRONG><a name="[b8]"></a>CLOCK_HAL_GetMcgMode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, fsl_mcg_hal_modes.o(i.CLOCK_HAL_GetMcgMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsPllSelected
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllSrc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[bc]"></a>CLOCK_HAL_GetOutClk</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetOutClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0Clk
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetInternalRefClk
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCoreClockFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
</UL>

<P><STRONG><a name="[bd]"></a>CLOCK_HAL_GetPll0Clk</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetPll0Clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_HAL_GetPll0Clk &rArr; CLOCK_HAL_GetPll0RefFreq &rArr; CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0RefFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>

<P><STRONG><a name="[bf]"></a>CLOCK_HAL_GetPll0RefFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetPll0RefFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_HAL_GetPll0RefFreq &rArr; CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0Clk
</UL>

<P><STRONG><a name="[c2]"></a>CLOCK_HAL_SetFbeMode</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, fsl_mcg_hal_modes.o(i.CLOCK_HAL_SetFbeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_HAL_SetFbeMode &rArr; CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsPllSelected
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsOsc0Stable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllSrc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[c3]"></a>CLOCK_HAL_SetFbiMode</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, fsl_mcg_hal_modes.o(i.CLOCK_HAL_SetFbiMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_HAL_SetFbiMode &rArr; CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_UpdateFastClkInternalRefDiv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetInternalRefClkMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllSrc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[d3]"></a>CLOCK_HAL_SetOsc0Mode</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_SetOsc0Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_HAL_SetOsc0Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscInit
</UL>

<P><STRONG><a name="[d5]"></a>CLOCK_HAL_SetOutDiv</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_sim_hal_mk60d10.o(i.CLOCK_HAL_SetOutDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_HAL_SetOutDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfigration
</UL>

<P><STRONG><a name="[c6]"></a>CLOCK_HAL_SetPbeMode</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, fsl_mcg_hal_modes.o(i.CLOCK_HAL_SetPbeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_HAL_SetPbeMode &rArr; CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_PrepareOsc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsPllSelected
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[b6]"></a>CLOCK_HAL_TestFllExternalRefFreq</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_TestFllExternalRefFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllRefClk
</UL>

<P><STRONG><a name="[b4]"></a>CLOCK_HAL_TestFllFreq</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_TestFllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_HAL_TestFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllClk
</UL>

<P><STRONG><a name="[b7]"></a>CLOCK_HAL_TestOscFreq</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_TestOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgExternalClkFreq
</UL>

<P><STRONG><a name="[c4]"></a>CLOCK_HAL_UpdateFastClkInternalRefDiv</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_UpdateFastClkInternalRefDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_HAL_UpdateFastClkInternalRefDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetInternalRefClkMode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetInternalRefClkMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[c9]"></a>CLOCK_SYS_EnablePortClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk60d10.o(i.CLOCK_SYS_EnablePortClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CLOCK_SYS_EnablePortClock &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[cc]"></a>CLOCK_SYS_EnableUartClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk60d10.o(i.CLOCK_SYS_EnableUartClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CLOCK_SYS_EnableUartClock &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_HAL_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[ce]"></a>CLOCK_SYS_GetBusClockFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_clock_mk60d10.o(i.CLOCK_SYS_GetBusClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CLOCK_SYS_GetBusClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetUartFreq
</UL>

<P><STRONG><a name="[cd]"></a>CLOCK_SYS_GetCoreClockFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock_mk60d10.o(i.CLOCK_SYS_GetCoreClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CLOCK_SYS_GetCoreClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_FllStableDelay
</UL>

<P><STRONG><a name="[cf]"></a>CLOCK_SYS_GetSystemClockFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock_mk60d10.o(i.CLOCK_SYS_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CLOCK_SYS_GetSystemClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetUartFreq
</UL>

<P><STRONG><a name="[d0]"></a>CLOCK_SYS_GetUartFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_clock_mk60d10.o(i.CLOCK_SYS_GetUartFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CLOCK_SYS_GetUartFreq &rArr; CLOCK_SYS_GetSystemClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetBusClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[b0]"></a>CLOCK_SYS_OscInit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, fsl_clock_manager.o(i.CLOCK_SYS_OscInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CLOCK_SYS_OscInit &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_HAL_SetCapacitor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetOsc0Mode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetOscerConfigration
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitOsc0
</UL>

<P><STRONG><a name="[b1]"></a>CLOCK_SYS_RtcOscInit</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, fsl_clock_manager.o(i.CLOCK_SYS_RtcOscInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = CLOCK_SYS_RtcOscInit &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_HAL_SetOscillatorCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitRtcOsc
</UL>

<P><STRONG><a name="[af]"></a>CLOCK_SYS_SetConfiguration</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_clock_mk60d10.o(i.CLOCK_SYS_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CLOCK_SYS_SetConfiguration &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetOutDiv
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCoreClockFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfigration
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetOscerConfigration
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
</UL>

<P><STRONG><a name="[d6]"></a>CLOCK_SYS_SetMcgMode</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, fsl_clock_manager.o(i.CLOCK_SYS_SetMcgMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLOCK_SYS_SetMcgMode &rArr; CLOCK_HAL_SetPbeMode &rArr; CLOCK_HAL_GetMcgMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_UpdateFastClkInternalRefDiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_EnablePll0InFllMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgPeeToFbe
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetLowPowerModeCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetClkOutSrc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
</UL>

<P><STRONG><a name="[d2]"></a>CLOCK_SYS_SetOscerConfigration</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_clock_manager.o(i.CLOCK_SYS_SetOscerConfigration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SYS_SetOscerConfigration
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_HAL_SetExternalRefClkInStopModeCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_HAL_SetExternalRefClkCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscInit
</UL>

<P><STRONG><a name="[df]"></a>DbgConsole_Init</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = DbgConsole_Init &rArr; CLOCK_SYS_EnableUartClock &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_SetParityMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_SetBaudRate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetUartFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableUartClock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
</UL>

<P><STRONG><a name="[d1]"></a>OSC_HAL_SetCapacitor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_osc_hal.o(i.OSC_HAL_SetCapacitor))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscInit
</UL>

<P><STRONG><a name="[8]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_mk60d10.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>UART_HAL_Getchar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_uart_hal.o(i.UART_HAL_Getchar))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_ReceiveDataPolling
</UL>

<P><STRONG><a name="[e5]"></a>UART_HAL_Putchar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_uart_hal.o(i.UART_HAL_Putchar))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_SendDataPolling
</UL>

<P><STRONG><a name="[f]"></a>UART_HAL_ReceiveDataPolling</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fsl_uart_hal.o(i.UART_HAL_ReceiveDataPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_HAL_ReceiveDataPolling
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_Getchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Init)
</UL>
<P><STRONG><a name="[e]"></a>UART_HAL_SendDataPolling</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_uart_hal.o(i.UART_HAL_SendDataPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_HAL_SendDataPolling
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_HAL_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Init)
</UL>
<P><STRONG><a name="[e1]"></a>UART_HAL_SetBaudRate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_uart_hal.o(i.UART_HAL_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_HAL_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[e2]"></a>UART_HAL_SetParityMode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_uart_hal.o(i.UART_HAL_SetParityMode))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_assert</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_misc_utilities.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_RtcOscInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_OscInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableUartClock
</UL>

<P><STRONG><a name="[e6]"></a>_doprint</STRONG> (Thumb, 1380 bytes, Stack size 152 bytes, print_scan.o(i._doprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _doprint &rArr; fput_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mknumstr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fput_pad
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>

<P><STRONG><a name="[ea]"></a>configure_uart_pins</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, pin_mux.o(i.configure_uart_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = configure_uart_pins &rArr; PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_HAL_SetMuxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
</UL>

<P><STRONG><a name="[eb]"></a>dbg_uart_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(i.dbg_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = dbg_uart_init &rArr; DbgConsole_Init &rArr; CLOCK_SYS_EnableUartClock &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart_pins
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[f2]"></a>debug_getchar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_debug_console.o(i.debug_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mygetchar
</UL>

<P><STRONG><a name="[ec]"></a>debug_printf</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fsl_debug_console.o(i.debug_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = debug_printf &rArr; _doprint &rArr; fput_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doprint
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myintprint
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfprint
</UL>

<P><STRONG><a name="[ed]"></a>debug_putchar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_debug_console.o(i.debug_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = debug_putchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myputchar
</UL>

<P><STRONG><a name="[b]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_debug_console.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>getElement</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.getElement))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asmmain
</UL>

<P><STRONG><a name="[ee]"></a>getkWh</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.getkWh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getkWh
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initArray
</UL>

<P><STRONG><a name="[f0]"></a>hardware_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware_init.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = hardware_init &rArr; dbg_uart_init &rArr; DbgConsole_Init &rArr; CLOCK_SYS_EnableUartClock &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>initArray</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.initArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initArray &rArr; getkWh
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkWh
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>init_data_bss</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, startup.o(i.init_data_bss))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = main &rArr; asmmain &rArr;  asmmain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asmmain
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initArray
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a8]"></a>myMenuPrint</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.myMenuPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = myMenuPrint &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asmmain
</UL>

<P><STRONG><a name="[a5]"></a>myfprint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.myfprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = myfprint &rArr; debug_printf &rArr; _doprint &rArr; fput_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asmmain
</UL>

<P><STRONG><a name="[a6]"></a>mygetchar</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.mygetchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mygetchar &rArr; debug_getchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asmmain
</UL>

<P><STRONG><a name="[aa]"></a>myintprint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.myintprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = myintprint &rArr; debug_printf &rArr; _doprint &rArr; fput_pad
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asmmain
</UL>

<P><STRONG><a name="[a7]"></a>myputchar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.myputchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = myputchar &rArr; debug_putchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asmmain
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10]"></a>debug_putc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_debug_console.o(i.debug_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = debug_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.debug_printf)
</UL>
<P><STRONG><a name="[e8]"></a>fput_pad</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, print_scan.o(i.fput_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fput_pad
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doprint
</UL>

<P><STRONG><a name="[e7]"></a>mknumstr</STRONG> (Thumb, 166 bytes, Stack size 36 bytes, print_scan.o(i.mknumstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mknumstr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doprint
</UL>

<P><STRONG><a name="[e3]"></a>PORT_HAL_SetMuxMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pin_mux.o(i.PORT_HAL_SetMuxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart_pins
</UL>

<P><STRONG><a name="[ac]"></a>PORT_HAL_SetMuxMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, board.o(i.PORT_HAL_SetMuxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PORT_HAL_SetMuxMode &rArr; __aeabi_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
</UL>

<P><STRONG><a name="[db]"></a>CLOCK_HAL_GetClkOutStat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock_manager.o(i.CLOCK_HAL_GetClkOutStat))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgPeeToFbe
</UL>

<P><STRONG><a name="[da]"></a>CLOCK_HAL_SetClkOutSrc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock_manager.o(i.CLOCK_HAL_SetClkOutSrc))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgPeeToFbe
</UL>

<P><STRONG><a name="[d9]"></a>CLOCK_HAL_SetLowPowerModeCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock_manager.o(i.CLOCK_HAL_SetLowPowerModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[d8]"></a>CLOCK_SYS_SetMcgPeeToFbe</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_clock_manager.o(i.CLOCK_SYS_SetMcgPeeToFbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SYS_SetMcgPeeToFbe
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetClkOutSrc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetClkOutStat
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetMcgMode
</UL>

<P><STRONG><a name="[dd]"></a>OSC_HAL_SetExternalRefClkCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock_manager.o(i.OSC_HAL_SetExternalRefClkCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetOscerConfigration
</UL>

<P><STRONG><a name="[de]"></a>OSC_HAL_SetExternalRefClkInStopModeCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock_manager.o(i.OSC_HAL_SetExternalRefClkInStopModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetOscerConfigration
</UL>

<P><STRONG><a name="[d4]"></a>RTC_HAL_SetOscillatorCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock_manager.o(i.RTC_HAL_SetOscillatorCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_RtcOscInit
</UL>

<P><STRONG><a name="[d]"></a>CLOCK_SYS_FllStableDelay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_clock_mk60d10.o(i.CLOCK_SYS_FllStableDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CLOCK_SYS_FllStableDelay &rArr; CLOCK_SYS_GetCoreClockFreq &rArr; CLOCK_HAL_GetOutClk &rArr; CLOCK_HAL_GetFllClk &rArr; CLOCK_HAL_GetFllRefClk &rArr; CLOCK_HAL_TestFllExternalRefFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCoreClockFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_clock_mk60d10.o(i.CLOCK_SYS_SetConfiguration)
</UL>
<P><STRONG><a name="[d7]"></a>CLOCK_SYS_SetSimConfigration</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fsl_clock_mk60d10.o(i.CLOCK_SYS_SetSimConfigration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_SYS_SetSimConfigration &rArr; CLOCK_HAL_SetOutDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetOutDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
</UL>

<P><STRONG><a name="[cb]"></a>SIM_HAL_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock_mk60d10.o(i.SIM_HAL_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_HAL_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnablePortClock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_EnableUartClock
</UL>

<P><STRONG><a name="[c8]"></a>CLOCK_HAL_GetInternalRefClkMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetInternalRefClkMode))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_UpdateFastClkInternalRefDiv
</UL>

<P><STRONG><a name="[b5]"></a>CLOCK_HAL_GetMcgExternalClkFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_GetMcgExternalClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_HAL_GetMcgExternalClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_TestOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetOutClk
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetPll0RefFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetFllRefClk
</UL>

<P><STRONG><a name="[c7]"></a>CLOCK_HAL_SetInternalRefClkMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_mcg_hal.o(i.CLOCK_HAL_SetInternalRefClkMode))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_UpdateFastClkInternalRefDiv
</UL>

<P><STRONG><a name="[b9]"></a>CLOCK_HAL_GetClkOutStat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_mcg_hal_modes.o(i.CLOCK_HAL_GetClkOutStat))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
</UL>

<P><STRONG><a name="[ba]"></a>CLOCK_HAL_GetFllSrc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_mcg_hal_modes.o(i.CLOCK_HAL_GetFllSrc))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
</UL>

<P><STRONG><a name="[c5]"></a>CLOCK_HAL_GetInternalRefClkMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_mcg_hal_modes.o(i.CLOCK_HAL_GetInternalRefClkMode))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbiMode
</UL>

<P><STRONG><a name="[c1]"></a>CLOCK_HAL_IsOsc0Stable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_mcg_hal_modes.o(i.CLOCK_HAL_IsOsc0Stable))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_PrepareOsc
</UL>

<P><STRONG><a name="[bb]"></a>CLOCK_HAL_IsPllSelected</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_mcg_hal_modes.o(i.CLOCK_HAL_IsPllSelected))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetFbeMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_GetMcgMode
</UL>

<P><STRONG><a name="[c0]"></a>CLOCK_HAL_PrepareOsc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_mcg_hal_modes.o(i.CLOCK_HAL_PrepareOsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_HAL_PrepareOsc
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_IsOsc0Stable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_HAL_SetPbeMode
</UL>

<P><STRONG><a name="[c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
